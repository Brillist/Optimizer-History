#include "libclp.h"
#include "Or.h"

////////////////////////////////////////////////////////////////////////////////////////////////////

LUT_NS_USE;

////////////////////////////////////////////////////////////////////////////////////////////////////

UTL_CLASS_IMPL(clp::Or);

////////////////////////////////////////////////////////////////////////////////////////////////////

CLP_NS_BEGIN;

////////////////////////////////////////////////////////////////////////////////////////////////////

Or::Or(Goal* g0, Goal* g1, uint_t label)
    : Goal(g0->manager())
{
    init();
    _label = label;
    _choices.push_back(g0);
    _choices.push_back(g1);
    addRefs();
}

////////////////////////////////////////////////////////////////////////////////////////////////////

void
Or::copy(const Object& rhs_)
{
    auto& rhs = utl::cast<Or>(rhs_);
    super::copy(rhs);
    clear();
    copyVector(_choices, rhs._choices);
    addRefs();
}

////////////////////////////////////////////////////////////////////////////////////////////////////

void
Or::clear()
{
    removeRefCont(_choices);
}

////////////////////////////////////////////////////////////////////////////////////////////////////

void
Or::execute()
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////

void
Or::addRefs()
{
    addRefCont(_choices);
}

////////////////////////////////////////////////////////////////////////////////////////////////////

CLP_NS_END;
