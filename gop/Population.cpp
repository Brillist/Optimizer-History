#include "libgop.h"
#include "Population.h"

////////////////////////////////////////////////////////////////////////////////////////////////////

UTL_NS_USE;
LUT_NS_USE;

////////////////////////////////////////////////////////////////////////////////////////////////////

UTL_CLASS_IMPL(gop::Population);

////////////////////////////////////////////////////////////////////////////////////////////////////

GOP_NS_BEGIN;

////////////////////////////////////////////////////////////////////////////////////////////////////

void
Population::copy(const Object& rhs)
{
    auto& pop = utl::cast<Population>(rhs);
    clear();
    _inds.reserve(pop.size());
    for (auto ind : pop)
    {
        add(*ind);
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////

void
Population::clear()
{
    // remove references
    if (_owner)
    {
        for (auto ind : self)
        {
            delete ind;
        }
    }
    _inds.clear();
    _totalScore = 0.0;
    _totalFitness = 0.0;
}

////////////////////////////////////////////////////////////////////////////////////////////////////

void
Population::set(uint_t idx, StringInd<uint_t>* ind)
{
    ASSERTD(idx < size());
    auto indPop = ind->getPop();
    ASSERTD(indPop != this);
    if (indPop != nullptr)
    {
        indPop->onAddRemoveInd();
    }
    _inds[idx] = ind;
}

////////////////////////////////////////////////////////////////////////////////////////////////////

double
Population::totalScore() const
{
    if (_totalScore == 0.0)
    {
        for (auto ind : self)
        {
            _totalScore += ind->getScore();
        }
    }
    return _totalScore;
}

////////////////////////////////////////////////////////////////////////////////////////////////////

double
Population::stdDevScore() const
{
    double avg = averageScore();
    double sum = 0.0;
    uint_t i, numInds = size();
    for (auto ind : self)
    {
        double diff = ind->getScore() - avg;
        sum += (diff * diff);
    }
    return sqrt(sum / (double)numInds);
}

////////////////////////////////////////////////////////////////////////////////////////////////////

double
Population::totalFitness() const
{
    if (_totalFitness == 0.0)
    {
        for (auto ind : self)
        {
            _totalFitness += ind->getFitness();
        }
    }
    return _totalFitness;
}

////////////////////////////////////////////////////////////////////////////////////////////////////

double
Population::stdDevFitness() const
{
    double avg = averageFitness();
    double sum = 0.0;
    for (auto ind : self)
    {
        double diff = (ind->getFitness() - avg);
        sum += (diff * diff);
    }
    return sqrt(sum / (double)_inds.size());
}

////////////////////////////////////////////////////////////////////////////////////////////////////

void
Population::add(const Population& rhs, uint_t beginIdx, uint_t endIdx)
{
    if (endIdx == uint_t_max)
    {
        endIdx = rhs.size();
    }

    auto endIt = rhs.begin() + endIdx;
    for (auto it = rhs.begin() + beginIdx; it != endIt; ++it)
    {
        auto& ind = **it;
        add(ind);
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////

void
Population::add(StringInd<uint_t>* ind)
{
    auto indPop = ind->getPop();
    ASSERTD(indPop != this);
    if (indPop != nullptr)
    {
        indPop->onAddRemoveInd();
    }
    _inds.push_back(ind);
}

////////////////////////////////////////////////////////////////////////////////////////////////////

void
Population::sort(IndOrdering* ordering)
{
    std::sort(_inds.begin(), _inds.end(), IndOrderingSTL(ordering));
}

////////////////////////////////////////////////////////////////////////////////////////////////////

void
Population::shuffle(rng_t& rng)
{
    rng.shuffle(_inds);
}

////////////////////////////////////////////////////////////////////////////////////////////////////

void
Population::init(bool owner)
{
    _owner = owner;
    _totalScore = 0.0;
    _totalFitness = 0.0;
}

////////////////////////////////////////////////////////////////////////////////////////////////////

void
Population::deInit()
{
    clear();
}

////////////////////////////////////////////////////////////////////////////////////////////////////

void
Population::onAddRemoveInd() const
{
    _totalScore = 0.0;
    _totalFitness = 0.0;
}

////////////////////////////////////////////////////////////////////////////////////////////////////

void
Population::onChangeScore() const
{
    _totalScore = 0.0;
}

////////////////////////////////////////////////////////////////////////////////////////////////////

void
Population::onChangeFitness() const
{
    _totalFitness = 0.0;
}

////////////////////////////////////////////////////////////////////////////////////////////////////

GOP_NS_END;
