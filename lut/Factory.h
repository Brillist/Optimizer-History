#pragma once

////////////////////////////////////////////////////////////////////////////////////////////////////

LUT_NS_BEGIN;

////////////////////////////////////////////////////////////////////////////////////////////////////

/**
   Abstract base for a class that creates a new instance of T.

   \ingroup lut
*/

////////////////////////////////////////////////////////////////////////////////////////////////////

template <class T> class Factory : public utl::Object
{
    UTL_CLASS_DECL_TPL(Factory, T, utl::Object);
    UTL_CLASS_NO_COPY;
    UTL_CLASS_DEFID;

public:
    /**
       Make a new object.
       \return (address of) new instance of T
       \param param0 (optional) first parameter
       \param param1 (optional) second parameter
    */
    virtual T*
    make(void* param0 = nullptr, void* param1 = nullptr) const
    {
        ABORT();
        return nullptr;
    }
};

////////////////////////////////////////////////////////////////////////////////////////////////////

LUT_NS_END;

////////////////////////////////////////////////////////////////////////////////////////////////////

UTL_CLASS_IMPL_TPL(lut::Factory, T);
